using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class RealtimeNormcoreStatusModel
{
    [RealtimeProperty(1, true, false)]
    private int _normcoreClientID;

    [RealtimeProperty(2, true, false)]
    private int _internalClientID;

    [RealtimeProperty(3, true, true)]
    private bool _isGuide;

    //[RealtimeProperty(4, true, true)]
    private bool _guideHasEntered;

    [RealtimeProperty(5, true, true)]
    private bool _guideIsReady;

    [RealtimeProperty(6, true, true)]
    private int _guideID;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class RealtimeNormcoreStatusModel : RealtimeModel {
    public int normcoreClientID {
        get {
            return _cache.LookForValueInCache(_normcoreClientID, entry => entry.normcoreClientIDSet, entry => entry.normcoreClientID);
        }
        set {
            if (this.normcoreClientID == value) return;
            _cache.UpdateLocalCache(entry => { entry.normcoreClientIDSet = true; entry.normcoreClientID = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public int internalClientID {
        get {
            return _cache.LookForValueInCache(_internalClientID, entry => entry.internalClientIDSet, entry => entry.internalClientID);
        }
        set {
            if (this.internalClientID == value) return;
            _cache.UpdateLocalCache(entry => { entry.internalClientIDSet = true; entry.internalClientID = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public bool isGuide {
        get {
            return _cache.LookForValueInCache(_isGuide, entry => entry.isGuideSet, entry => entry.isGuide);
        }
        set {
            if (this.isGuide == value) return;
            _cache.UpdateLocalCache(entry => { entry.isGuideSet = true; entry.isGuide = value; return entry; });
            InvalidateReliableLength();
            FireIsGuideDidChange(value);
        }
    }
    
    public bool guideIsReady {
        get {
            return _cache.LookForValueInCache(_guideIsReady, entry => entry.guideIsReadySet, entry => entry.guideIsReady);
        }
        set {
            if (this.guideIsReady == value) return;
            _cache.UpdateLocalCache(entry => { entry.guideIsReadySet = true; entry.guideIsReady = value; return entry; });
            InvalidateReliableLength();
            FireGuideIsReadyDidChange(value);
        }
    }
    
    public int guideID {
        get {
            return _cache.LookForValueInCache(_guideID, entry => entry.guideIDSet, entry => entry.guideID);
        }
        set {
            if (this.guideID == value) return;
            _cache.UpdateLocalCache(entry => { entry.guideIDSet = true; entry.guideID = value; return entry; });
            InvalidateReliableLength();
            FireGuideIDDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(RealtimeNormcoreStatusModel model, T value);
    public event PropertyChangedHandler<bool> isGuideDidChange;
    public event PropertyChangedHandler<bool> guideIsReadyDidChange;
    public event PropertyChangedHandler<int> guideIDDidChange;
    
    private struct LocalCacheEntry {
        public bool normcoreClientIDSet;
        public int normcoreClientID;
        public bool internalClientIDSet;
        public int internalClientID;
        public bool isGuideSet;
        public bool isGuide;
        public bool guideIsReadySet;
        public bool guideIsReady;
        public bool guideIDSet;
        public int guideID;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        NormcoreClientID = 1,
        InternalClientID = 2,
        IsGuide = 3,
        GuideIsReady = 5,
        GuideID = 6,
    }
    
    public RealtimeNormcoreStatusModel() : this(null) {
    }
    
    public RealtimeNormcoreStatusModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireIsGuideDidChange(bool value) {
        try {
            isGuideDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGuideIsReadyDidChange(bool value) {
        try {
            guideIsReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGuideIDDidChange(int value) {
        try {
            guideIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.NormcoreClientID, (uint)_normcoreClientID);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.InternalClientID, (uint)_internalClientID);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsGuide, _isGuide ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GuideIsReady, _guideIsReady ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GuideID, (uint)_guideID);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.normcoreClientIDSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.NormcoreClientID, (uint)entry.normcoreClientID);
            }
            if (entry.internalClientIDSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.InternalClientID, (uint)entry.internalClientID);
            }
            if (entry.isGuideSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsGuide, entry.isGuide ? 1u : 0u);
            }
            if (entry.guideIsReadySet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GuideIsReady, entry.guideIsReady ? 1u : 0u);
            }
            if (entry.guideIDSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GuideID, (uint)entry.guideID);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.NormcoreClientID, (uint)_normcoreClientID);
            stream.WriteVarint32((uint)PropertyID.InternalClientID, (uint)_internalClientID);
            stream.WriteVarint32((uint)PropertyID.IsGuide, _isGuide ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.GuideIsReady, _guideIsReady ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.GuideID, (uint)_guideID);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.normcoreClientIDSet || entry.internalClientIDSet || entry.isGuideSet || entry.guideIsReadySet || entry.guideIDSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.normcoreClientIDSet) {
                stream.WriteVarint32((uint)PropertyID.NormcoreClientID, (uint)entry.normcoreClientID);
                didWriteProperties = true;
            }
            if (entry.internalClientIDSet) {
                stream.WriteVarint32((uint)PropertyID.InternalClientID, (uint)entry.internalClientID);
                didWriteProperties = true;
            }
            if (entry.isGuideSet) {
                stream.WriteVarint32((uint)PropertyID.IsGuide, entry.isGuide ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.guideIsReadySet) {
                stream.WriteVarint32((uint)PropertyID.GuideIsReady, entry.guideIsReady ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.guideIDSet) {
                stream.WriteVarint32((uint)PropertyID.GuideID, (uint)entry.guideID);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.NormcoreClientID: {
                    _normcoreClientID = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.InternalClientID: {
                    _internalClientID = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.IsGuide: {
                    bool previousValue = _isGuide;
                    _isGuide = (stream.ReadVarint32() != 0);
                    bool isGuideExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isGuideSet);
                    if (!isGuideExistsInChangeCache && _isGuide != previousValue) {
                        FireIsGuideDidChange(_isGuide);
                    }
                    break;
                }
                case (uint)PropertyID.GuideIsReady: {
                    bool previousValue = _guideIsReady;
                    _guideIsReady = (stream.ReadVarint32() != 0);
                    bool guideIsReadyExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.guideIsReadySet);
                    if (!guideIsReadyExistsInChangeCache && _guideIsReady != previousValue) {
                        FireGuideIsReadyDidChange(_guideIsReady);
                    }
                    break;
                }
                case (uint)PropertyID.GuideID: {
                    int previousValue = _guideID;
                    _guideID = (int)stream.ReadVarint32();
                    bool guideIDExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.guideIDSet);
                    if (!guideIDExistsInChangeCache && _guideID != previousValue) {
                        FireGuideIDDidChange(_guideID);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _normcoreClientID = normcoreClientID;
        _internalClientID = internalClientID;
        _isGuide = isGuide;
        _guideIsReady = guideIsReady;
        _guideID = guideID;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
