using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class RealtimeNormcoreSceneManagerModel
{
    [RealtimeProperty(1, true, true)]
    private int _loadingScreenMainConnectedUsers;

    [RealtimeProperty(2, true, true)]
    private int _osakaConnectedUSers;

    [RealtimeProperty(3, true, true)]
    private int _loadingScreenSecondaryConnectedUsers;

    [RealtimeProperty(4, true)]
    private RealtimeDictionary<UserIDModel> _usersCurrentScene;

    [RealtimeProperty(5, true)]
    private RealtimeSet<UserIDModel> _aboutToConnectQueue;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class RealtimeNormcoreSceneManagerModel : RealtimeModel {
    public int loadingScreenMainConnectedUsers {
        get {
            return _cache.LookForValueInCache(_loadingScreenMainConnectedUsers, entry => entry.loadingScreenMainConnectedUsersSet, entry => entry.loadingScreenMainConnectedUsers);
        }
        set {
            if (this.loadingScreenMainConnectedUsers == value) return;
            _cache.UpdateLocalCache(entry => { entry.loadingScreenMainConnectedUsersSet = true; entry.loadingScreenMainConnectedUsers = value; return entry; });
            InvalidateReliableLength();
            FireLoadingScreenMainConnectedUsersDidChange(value);
        }
    }
    
    public int osakaConnectedUSers {
        get {
            return _cache.LookForValueInCache(_osakaConnectedUSers, entry => entry.osakaConnectedUSersSet, entry => entry.osakaConnectedUSers);
        }
        set {
            if (this.osakaConnectedUSers == value) return;
            _cache.UpdateLocalCache(entry => { entry.osakaConnectedUSersSet = true; entry.osakaConnectedUSers = value; return entry; });
            InvalidateReliableLength();
            FireOsakaConnectedUSersDidChange(value);
        }
    }
    
    public int loadingScreenSecondaryConnectedUsers {
        get {
            return _cache.LookForValueInCache(_loadingScreenSecondaryConnectedUsers, entry => entry.loadingScreenSecondaryConnectedUsersSet, entry => entry.loadingScreenSecondaryConnectedUsers);
        }
        set {
            if (this.loadingScreenSecondaryConnectedUsers == value) return;
            _cache.UpdateLocalCache(entry => { entry.loadingScreenSecondaryConnectedUsersSet = true; entry.loadingScreenSecondaryConnectedUsers = value; return entry; });
            InvalidateReliableLength();
            FireLoadingScreenSecondaryConnectedUsersDidChange(value);
        }
    }
    
    public Normal.Realtime.Serialization.RealtimeDictionary<UserIDModel> usersCurrentScene {
        get { return _usersCurrentScene; }
    }
    
    public Normal.Realtime.Serialization.RealtimeSet<UserIDModel> aboutToConnectQueue {
        get { return _aboutToConnectQueue; }
    }
    
    public delegate void PropertyChangedHandler<in T>(RealtimeNormcoreSceneManagerModel model, T value);
    public event PropertyChangedHandler<int> loadingScreenMainConnectedUsersDidChange;
    public event PropertyChangedHandler<int> osakaConnectedUSersDidChange;
    public event PropertyChangedHandler<int> loadingScreenSecondaryConnectedUsersDidChange;
    
    private struct LocalCacheEntry {
        public bool loadingScreenMainConnectedUsersSet;
        public int loadingScreenMainConnectedUsers;
        public bool osakaConnectedUSersSet;
        public int osakaConnectedUSers;
        public bool loadingScreenSecondaryConnectedUsersSet;
        public int loadingScreenSecondaryConnectedUsers;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        LoadingScreenMainConnectedUsers = 1,
        OsakaConnectedUSers = 2,
        LoadingScreenSecondaryConnectedUsers = 3,
        UsersCurrentScene = 4,
        AboutToConnectQueue = 5,
    }
    
    public RealtimeNormcoreSceneManagerModel() : this(null) {
    }
    
    public RealtimeNormcoreSceneManagerModel(RealtimeModel parent) : base(null, parent) {
        RealtimeModel[] childModels = new RealtimeModel[2];
        
        _usersCurrentScene = new Normal.Realtime.Serialization.RealtimeDictionary<UserIDModel>();
        childModels[0] = _usersCurrentScene;
        
        _aboutToConnectQueue = new Normal.Realtime.Serialization.RealtimeSet<UserIDModel>();
        childModels[1] = _aboutToConnectQueue;
        
        SetChildren(childModels);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireLoadingScreenMainConnectedUsersDidChange(int value) {
        try {
            loadingScreenMainConnectedUsersDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireOsakaConnectedUSersDidChange(int value) {
        try {
            osakaConnectedUSersDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLoadingScreenSecondaryConnectedUsersDidChange(int value) {
        try {
            loadingScreenSecondaryConnectedUsersDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.LoadingScreenMainConnectedUsers, (uint)_loadingScreenMainConnectedUsers);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.OsakaConnectedUSers, (uint)_osakaConnectedUSers);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.LoadingScreenSecondaryConnectedUsers, (uint)_loadingScreenSecondaryConnectedUsers);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.loadingScreenMainConnectedUsersSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.LoadingScreenMainConnectedUsers, (uint)entry.loadingScreenMainConnectedUsers);
            }
            if (entry.osakaConnectedUSersSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.OsakaConnectedUSers, (uint)entry.osakaConnectedUSers);
            }
            if (entry.loadingScreenSecondaryConnectedUsersSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.LoadingScreenSecondaryConnectedUsers, (uint)entry.loadingScreenSecondaryConnectedUsers);
            }
        }
        length += WriteStream.WriteCollectionLength((uint)PropertyID.UsersCurrentScene, _usersCurrentScene, context);
        length += WriteStream.WriteCollectionLength((uint)PropertyID.AboutToConnectQueue, _aboutToConnectQueue, context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.LoadingScreenMainConnectedUsers, (uint)_loadingScreenMainConnectedUsers);
            stream.WriteVarint32((uint)PropertyID.OsakaConnectedUSers, (uint)_osakaConnectedUSers);
            stream.WriteVarint32((uint)PropertyID.LoadingScreenSecondaryConnectedUsers, (uint)_loadingScreenSecondaryConnectedUsers);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.loadingScreenMainConnectedUsersSet || entry.osakaConnectedUSersSet || entry.loadingScreenSecondaryConnectedUsersSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.loadingScreenMainConnectedUsersSet) {
                stream.WriteVarint32((uint)PropertyID.LoadingScreenMainConnectedUsers, (uint)entry.loadingScreenMainConnectedUsers);
                didWriteProperties = true;
            }
            if (entry.osakaConnectedUSersSet) {
                stream.WriteVarint32((uint)PropertyID.OsakaConnectedUSers, (uint)entry.osakaConnectedUSers);
                didWriteProperties = true;
            }
            if (entry.loadingScreenSecondaryConnectedUsersSet) {
                stream.WriteVarint32((uint)PropertyID.LoadingScreenSecondaryConnectedUsers, (uint)entry.loadingScreenSecondaryConnectedUsers);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
        stream.WriteCollection((uint)PropertyID.UsersCurrentScene, _usersCurrentScene, context);
        stream.WriteCollection((uint)PropertyID.AboutToConnectQueue, _aboutToConnectQueue, context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.LoadingScreenMainConnectedUsers: {
                    int previousValue = _loadingScreenMainConnectedUsers;
                    _loadingScreenMainConnectedUsers = (int)stream.ReadVarint32();
                    bool loadingScreenMainConnectedUsersExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.loadingScreenMainConnectedUsersSet);
                    if (!loadingScreenMainConnectedUsersExistsInChangeCache && _loadingScreenMainConnectedUsers != previousValue) {
                        FireLoadingScreenMainConnectedUsersDidChange(_loadingScreenMainConnectedUsers);
                    }
                    break;
                }
                case (uint)PropertyID.OsakaConnectedUSers: {
                    int previousValue = _osakaConnectedUSers;
                    _osakaConnectedUSers = (int)stream.ReadVarint32();
                    bool osakaConnectedUSersExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.osakaConnectedUSersSet);
                    if (!osakaConnectedUSersExistsInChangeCache && _osakaConnectedUSers != previousValue) {
                        FireOsakaConnectedUSersDidChange(_osakaConnectedUSers);
                    }
                    break;
                }
                case (uint)PropertyID.LoadingScreenSecondaryConnectedUsers: {
                    int previousValue = _loadingScreenSecondaryConnectedUsers;
                    _loadingScreenSecondaryConnectedUsers = (int)stream.ReadVarint32();
                    bool loadingScreenSecondaryConnectedUsersExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.loadingScreenSecondaryConnectedUsersSet);
                    if (!loadingScreenSecondaryConnectedUsersExistsInChangeCache && _loadingScreenSecondaryConnectedUsers != previousValue) {
                        FireLoadingScreenSecondaryConnectedUsersDidChange(_loadingScreenSecondaryConnectedUsers);
                    }
                    break;
                }
                case (uint)PropertyID.UsersCurrentScene: {
                    stream.ReadCollection(_usersCurrentScene, context);
                    break;
                }
                case (uint)PropertyID.AboutToConnectQueue: {
                    stream.ReadCollection(_aboutToConnectQueue, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _loadingScreenMainConnectedUsers = loadingScreenMainConnectedUsers;
        _osakaConnectedUSers = osakaConnectedUSers;
        _loadingScreenSecondaryConnectedUsers = loadingScreenSecondaryConnectedUsers;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
